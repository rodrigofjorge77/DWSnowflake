USE SCHEMA DW.SILVER;

CREATE OR REPLACE PROCEDURE SILVER_PRODUCTS()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
	
    create TABLE IF NOT EXISTS DW.SILVER.PRODUCTS (
        PRODUCT_ID NUMBER(38,0) NOT NULL,
        PRODUCT_NAME VARCHAR(40) NOT NULL,
        SUPPLIER_ID NUMBER(38,0),
        CATEGORY_ID NUMBER(38,0),
        QUANTITY_PER_UNIT VARCHAR(20),
        UNIT_PRICE FLOAT,
        UNITS_IN_STOCK NUMBER(38,0),
        UNITS_ON_ORDER NUMBER(38,0),
        REORDER_LEVEL NUMBER(38,0),
        DISCONTINUED NUMBER(38,0) NOT NULL,
        DATA_EXTRACAO DATE
    );

	TRUNCATE TABLE DW.SILVER.PRODUCTS;

     -- Inicia uma transação
    BEGIN TRANSACTION;

    -- Insere os dados transformados na tabela DW.SILVER.CATEGORIES
    INSERT INTO DW.SILVER.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,SUPPLIER_ID,CATEGORY_ID,QUANTITY_PER_UNIT,UNIT_PRICE,UNITS_IN_STOCK,UNITS_ON_ORDER,REORDER_LEVEL,DISCONTINUED,DATA_EXTRACAO)    
    SELECT COALESCE(PRODUCT_ID,-1), 
        UPPER(COALESCE(PRODUCT_NAME, 'NA')), 
        COALESCE(SUPPLIER_ID, -1), 
        COALESCE(CATEGORY_ID, -1), 
        UPPER(COALESCE(QUANTITY_PER_UNIT,'NA')), 
        COALESCE(UNIT_PRICE,0), 
        COALESCE(UNITS_IN_STOCK,0), 
        COALESCE(UNITS_ON_ORDER,0), 
        COALESCE(REORDER_LEVEL,0), 
        COALESCE(DISCONTINUED,0), 
        DATA_EXTRACAO
    FROM DW.BRONZE.PRODUCTS;

    -- Finaliza a transação
    COMMIT;

    RETURN 'Dados transferidos e transformados com sucesso';

EXCEPTION
    WHEN OTHER THEN
        -- Em caso de erro, realiza o rollback
        ROLLBACK;
        RETURN 'Erro durante a execução da procedure.';    

END;
$$;

CALL SILVER_PRODUCTS();

