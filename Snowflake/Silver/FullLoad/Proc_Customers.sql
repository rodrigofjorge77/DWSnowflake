USE SCHEMA DW.SILVER;

CREATE OR REPLACE PROCEDURE SILVER_CUSTOMERS()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
	
    create TABLE IF NOT EXISTS DW.SILVER.CUSTOMERS (
        CUSTOMER_ID VARCHAR(5) NOT NULL,
        COMPANY_NAME VARCHAR(40) NOT NULL,
        CONTACT_NAME VARCHAR(30),
        CONTACT_TITLE VARCHAR(30),
        ADDRESS VARCHAR(60),
        CITY VARCHAR(15),
        REGION VARCHAR(15),
        POSTAL_CODE VARCHAR(10),
        COUNTRY VARCHAR(15),
        PHONE VARCHAR(24),
        FAX VARCHAR(24),
        DATA_EXTRACAO DATE
    );

	TRUNCATE TABLE DW.SILVER.CUSTOMERS;

     -- Inicia uma transação
    BEGIN TRANSACTION;


    -- Insere os dados transformados na tabela DW.SILVER.CATEGORIES
    INSERT INTO DW.SILVER.CUSTOMERS (CUSTOMER_ID, COMPANY_NAME, CONTACT_NAME, CONTACT_TITLE, ADDRESS, CITY, REGION, POSTAL_CODE, COUNTRY, PHONE, FAX, DATA_EXTRACAO)
    SELECT CUSTOMER_ID, 
        UPPER(COALESCE(COMPANY_NAME, 'NA')), 
        UPPER(COALESCE(CONTACT_NAME, 'NA')), 
        UPPER(COALESCE(CONTACT_TITLE, 'NA')), 
        UPPER(COALESCE(ADDRESS, 'NA')), 
        UPPER(COALESCE(CITY, 'NA')), 
        UPPER(COALESCE(REGION, 'NA')), 
        COALESCE(POSTAL_CODE, 'NA'), 
        UPPER(COALESCE(COUNTRY, 'NA')), 
        COALESCE(PHONE, 'NA'), 
        COALESCE(FAX, 'NA'), 
        DATA_EXTRACAO
    FROM DW.BRONZE.CUSTOMERS;

    -- Finaliza a transação
    COMMIT;

    RETURN 'Dados transferidos e transformados com sucesso';

EXCEPTION
    WHEN OTHER THEN
        -- Em caso de erro, realiza o rollback
        ROLLBACK;
        RETURN 'Erro durante a execução da procedure.';    
END;
$$;

CALL SILVER_CUSTOMERS();

