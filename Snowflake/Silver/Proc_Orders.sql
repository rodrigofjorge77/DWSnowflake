USE SCHEMA DW.SILVER;

CREATE OR REPLACE PROCEDURE SILVER_ORDERS()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
	
    create TABLE IF NOT EXISTS DW.SILVER.ORDERS (
        ORDER_ID NUMBER(38,0) NOT NULL,
        CUSTOMER_ID VARCHAR(5),
        EMPLOYEE_ID NUMBER(38,0),
        ORDER_DATE DATE,
        REQUIRED_DATE DATE,
        SHIPPED_DATE DATE,
        SHIP_VIA NUMBER(38,0),
        FREIGHT FLOAT,
        SHIP_NAME VARCHAR(40),
        SHIP_ADDRESS VARCHAR(60),
        SHIP_CITY VARCHAR(15),
        SHIP_REGION VARCHAR(15),
        SHIP_POSTAL_CODE VARCHAR(10),
        SHIP_COUNTRY VARCHAR(15),
        DATA_EXTRACAO DATE
    );

	TRUNCATE TABLE DW.SILVER.ORDERS;

     -- Inicia uma transação
    BEGIN TRANSACTION;

    -- Insere os dados transformados na tabela DW.SILVER.ORDERS
    INSERT INTO DW.SILVER.ORDERS (ORDER_ID,CUSTOMER_ID,EMPLOYEE_ID,ORDER_DATE,REQUIRED_DATE,SHIPPED_DATE,SHIP_VIA,FREIGHT,SHIP_NAME,SHIP_ADDRESS,SHIP_CITY,SHIP_REGION,SHIP_POSTAL_CODE,SHIP_COUNTRY,DATA_EXTRACAO)
    SELECT COALESCE(ORDER_ID,-1), 
        UPPER(COALESCE(CUSTOMER_ID,'NA')), 
        COALESCE(EMPLOYEE_ID,-1), 
        COALESCE(ORDER_DATE,'1901-01-01'), 
        COALESCE(REQUIRED_DATE,'1901-01-01'),
        COALESCE(SHIPPED_DATE,'1901-01-01'),
        COALESCE(SHIP_VIA,-1), 
        COALESCE(FREIGHT,0), 
        UPPER(COALESCE(SHIP_NAME,'NA')), 
        UPPER(COALESCE(SHIP_ADDRESS,'NA')), 
        UPPER(COALESCE(SHIP_CITY,'NA')), 
        UPPER(COALESCE(SHIP_REGION, 'NA')),
        UPPER(COALESCE(SHIP_POSTAL_CODE, 'NA')),
        UPPER(COALESCE(SHIP_COUNTRY, 'NA')),
        DATA_EXTRACAO
    FROM DW.BRONZE.ORDERS;

    -- Finaliza a transação
    COMMIT;

    RETURN 'Dados transferidos e transformados com sucesso';

EXCEPTION
    WHEN OTHER THEN
        -- Em caso de erro, realiza o rollback
        ROLLBACK;
        RETURN 'Erro durante a execução da procedure.';    

END;
$$;

CALL SILVER_ORDERS();