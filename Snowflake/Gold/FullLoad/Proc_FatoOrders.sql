USE SCHEMA DW.GOLD;

CREATE OR REPLACE PROCEDURE DW.GOLD.PROC_FATO_ORDERS()
RETURNS STRING
LANGUAGE SQL
AS
$$

BEGIN

    create or replace TABLE DW.GOLD.FATO_ORDERS (
        SK_ORDERS NUMBER(38,0),
        SK_CUSTOMER NUMBER(38,0),
        SK_EMPLOYEE NUMBER(38,0),
        SK_DATA NUMBER(38,0),
        FREIGHT FLOAT,
        QUANTITY NUMBER(38,0),
        DISCOUNT FLOAT
    );

    TRUNCATE TABLE DW.GOLD.FATO_ORDERS;

    -- Inicia uma transação
    BEGIN TRANSACTION;

    INSERT INTO DW.GOLD.FATO_ORDERS (SK_ORDERS, SK_CUSTOMER, SK_EMPLOYEE, SK_DATA, FREIGHT, QUANTITY, DISCOUNT)
    SELECT DO.SK_ORDERS, 
        DC.SK_CUSTOMER,
        DE.SK_EMPLOYEE,  
        DT.SK_DATA, 
        ROUND((OD.FREIGHT / count(*) OVER (PARTITION BY OD.ORDER_ID)) ,2) FREIGHT,
        OT.QUANTITY,
        OT.DISCOUNT 
    FROM DW.SILVER.ORDERS OD,
        DW.GOLD.DIM_ORDERS DO,
        DW.GOLD.DIM_CUSTOMERS DC,
        DW.GOLD.DIM_EMPLOYEES  DE,
        DW.GOLD.DIM_TEMPO DT,
        DW.SILVER.ORDER_DETAILS OT
    WHERE DO.ORDER_ID       = OD.ORDER_ID 
    AND   DC.CUSTOMER_ID 	= OD.CUSTOMER_ID
    AND   DE.EMPLOYEE_ID 	= OD.EMPLOYEE_ID 
    AND   DT."DATA" 	    = OD.ORDER_DATE 
    AND   OT.ORDER_ID 		= DO.ORDER_ID 
    AND   OT.PRODUCT_ID 	= DO.PRODUCT_ID ;

    COMMIT;

    RETURN 'Dados inseridos com sucesso na tabela FATO_ORDERS!';

EXCEPTION
    WHEN OTHER THEN
        -- Em caso de erro, realiza o rollback
        ROLLBACK;
        RETURN 'Erro durante a execução da procedure.';

END;
$$;

CALL DW.GOLD.PROC_FATO_ORDERS();